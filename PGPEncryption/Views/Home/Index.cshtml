@model PGPEncryption.Models.PGPEncryptionModel

@{
    ViewData["Title"] = "Encrypt message with PGP Public Key Block";
}

@*<h1>Index</h1>*@

<h4>Encrypt PGP-Message with Public Key</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="Index">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            @*            
            <div class="form-group">
                <label asp-for="PGPPublicKeyBlockInput" class="control-label"></label>
                <textarea asp-for="PGPPublicKeyBlockInput" class="form-control"></textarea>
                <span asp-validation-for="PGPPublicKeyBlockInput" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PGPInputToEncrypt" class="control-label"></label>
                <textarea asp-for="PGPInputToEncrypt" class="form-control"></textarea>
                <span asp-validation-for="PGPInputToEncrypt" class="text-danger"></span>
            </div>
            *@

            <div class="form-group">
                <label asp-for="PGPPublicKeyBlockInput" class="control-label"></label>
                @Html.EditorFor(m => m.PGPPublicKeyBlockInput, additionalViewData: new { htmlAttributes = new { @class = "form-control m-2 p-2", @style="min-height: 75%; min-height: 300px; min-width: 75%;" }})
            </div>
            <div class="form-group">
                <label asp-for="PGPInputToEncrypt" class="control-label"></label>
                @Html.EditorFor(m => m.PGPInputToEncrypt, additionalViewData: new { htmlAttributes = new { @class = "form-control m-2 p-2", @style="min-height: 75%; min-height: 300px; min-width: 75%;" }})
            </div>

            @if (ViewData.ContainsKey("PgpOutputMessage"))
            {
            <div class="form-group">
                    <label class="control-label">Encrypted message</label>
                    <textarea class="form-control m-2 p-2 text-box multi-line" style="min-height: 75%; min-height: 300px; min-width: 75%;">@ViewData["PgpOutputMessage"]</textarea>
            </div>
                
            }

            @if (ViewData.ContainsKey("NoEncryptionKey"))
            {
            <div>
                    <p class="text-danger">No encryption key found!</p>
            </div>
                
            }

            @if (ViewData.ContainsKey("ExceptionMessage"))
            {
                <div>
                    <p class="text-danger">@ViewData["ExceptionMessage"]</p>
                </div>

            }

            @* Show summary of error messages *@
            @Html.ValidationSummary(false, "", new { @class = "text-danger" })

            <div class="form-group">
                <input type="submit" value="Encrypt" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

@*<div class="row">
    <div class="col-md-6">
        <form asp-action="InspectPublicKey">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                @Html.EditorFor(m => m.Input, additionalViewData: new { htmlAttributes = new { @class = "form-control m-2 p-2", @style="min-height: 75%; min-height: 300px; min-width: 75%;" }})
            </div>
            <div class="form-group">
                <input type="submit" value="Inspect" class="btn btn-primary m-2 p-2" />
            </div>
        </form>
    </div>
</div>*@

@*<div>
    <a asp-action="Index">Back to List</a>
</div>*@

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
